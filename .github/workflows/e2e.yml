name: E2E Tests (Windows, no containers)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  e2e:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download MySQL 8.0.43
        run: |
          curl -L "https://cdn.mysql.com/Downloads/MySQL-8.0/mysql-8.0.43-winx64.msi" -o "$env:TEMP\mysql-8.0.43.msi"


      - name: Install MySQL
        run: |
          Start-Process msiexec.exe -ArgumentList "/i $env:TEMP\mysql-8.0.43.msi /qn INSTALLDIR=C:\mysql MYSQLROOTPASSWORD=root" -Wait

      - name: Add MySQL to PATH
        run: |
          $mysqlBin = "C:\mysql\bin"
          [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$mysqlBin", [System.EnvironmentVariableTarget]::Process)

      - name: Start MySQL service
        run: |
          try { 
            net start MySQL80
            Write-Host "MySQL service started successfully"
          } catch { 
            Write-Host "Error starting MySQL service: $_"
            Get-Service MySQL80 | Format-List *
          }
          exit 0

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          $maxAttempts = 30
          $attempts = 0
          do {
            try {
              $attempts++
              mysqladmin ping -h 127.0.0.1 -u root -proot
              Write-Host "MySQL is up!"
              break
            } catch {
              Write-Host "Attempt $attempts of $maxAttempts: MySQL not ready yet..."
              Start-Sleep -Seconds 2
            }
          } while ($attempts -lt $maxAttempts)
          
          if ($attempts -eq $maxAttempts) {
            Write-Error "MySQL failed to start after $maxAttempts attempts"
            exit 1
          }

      - name: Load test database
        run: |
          mysql --verbose --binary-mode=1 -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS testdb;"
          mysql --verbose --binary-mode=1 -h 127.0.0.1 -u root -proot testdb < backend\src\test\resources\full-database.sql

      - name: Test MySQL connection
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 20

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build backend
        working-directory: backend
        run: .\mvnw.cmd clean package -DskipTests

      - name: Verify JAR file
        working-directory: backend
        run: dir target

      - name: Start backend
        working-directory: backend
        run: |
          $jar = Get-ChildItem -Path target -Filter *.jar | Select-Object -First 1
          if (-not $jar) {
            Write-Host "No JAR found in target directory"
            exit 1
          }
          Write-Host "Starting backend with $($jar.Name)"
          Start-Process -FilePath "java" -ArgumentList "-jar", $jar.FullName -NoNewWindow
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_PROFILES_ACTIVE: test

      - name: Wait before backend health check
        run: Start-Sleep -Seconds 20

      - name: Wait for backend
        run: npx wait-on http://localhost:8080/actuator/health
        env:
          WAIT_ON_TIMEOUT: 60000

      - name: Install frontend dependencies
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm run build

      - name: Start frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: Start-Job { npm run dev }

      - name: Wait for frontend
        run: npx wait-on http://localhost:3000

      - name: Run Cypress tests
        working-directory: ./frontend/imdb-ratings-frontend
        run: npx cypress run --config baseUrl=http://localhost:3000

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend\cypress\screenshots

      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend\cypress\videos
