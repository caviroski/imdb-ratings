name: E2E Tests (Windows, no containers)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  e2e:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MySQL 8.0.43
        run: |
          choco install mysql --version=8.0.43 --params "/port:3306 /password:root /allowremotetransactions:true" -y

      - name: Start MySQL service
        run: |
          try { net start mysql } catch { Write-Host "MySQL already running" }
          exit 0

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          for ($i = 0; $i -lt 30; $i++) {
            try {
              mysqladmin ping -h 127.0.0.1 -proot | Out-Null
              Write-Host "✅ MySQL is up!"
              break
            } catch {
              Write-Host "⏳ Still waiting for MySQL..."
              Start-Sleep -Seconds 2
            }
          }

      - name: Load test database
        run: |
          mysql --verbose --binary-mode=1 -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS testdb;"
          mysql --verbose --binary-mode=1 -h 127.0.0.1 -u root -proot testdb < backend\src\test\resources\full-database.sql

      - name: Test MySQL connection
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 20

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build backend
        working-directory: backend
        run: .\mvnw.cmd clean package -DskipTests

      - name: Verify JAR file
        working-directory: backend
        run: dir target

      - name: Start backend
        working-directory: backend
        run: |
          $jar = Get-ChildItem -Path target -Filter *.jar | Select-Object -First 1
          if (-not $jar) {
            Write-Host "No JAR found in target directory"
            exit 1
          }
          Write-Host "Starting backend with $($jar.Name)"
          Start-Process -FilePath "java" -ArgumentList "-jar", $jar.FullName -NoNewWindow
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_PROFILES_ACTIVE: test

      - name: Wait before backend health check
        run: Start-Sleep -Seconds 20

      - name: Wait for backend
        run: npx wait-on http://localhost:8080/actuator/health
        env:
          WAIT_ON_TIMEOUT: 60000

      - name: Install frontend dependencies
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm run build

      - name: Start frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: Start-Job { npm run dev }

      - name: Wait for frontend
        run: npx wait-on http://localhost:3000

      - name: Run Cypress tests
        working-directory: ./frontend/imdb-ratings-frontend
        run: npx cypress run --config baseUrl=http://localhost:3000

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend\cypress\screenshots

      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend\cypress\videos
