name: E2E Tests (Windows, no containers)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  e2e:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download MySQL 8.0.43
        run: |
          curl -L "https://cdn.mysql.com/Downloads/MySQL-8.0/mysql-8.0.43-winx64.zip" -o "$env:TEMP\mysql.zip"
          Expand-Archive -Path "$env:TEMP\mysql.zip" -DestinationPath "C:\" -Force
          Rename-Item -Path "C:\mysql-8.0.43-winx64" -NewName "C:\mysql" -Force

      - name: Configure MySQL
        run: |
          # Create MySQL configuration file
          @"
          [mysqld]
          basedir=C:/mysql
          datadir=C:/mysql/data
          port=3306
          "@ | Out-File -Encoding UTF8 "C:\mysql\my.ini"

          # Initialize MySQL data directory
          New-Item -ItemType Directory -Path "C:\mysql\data" -Force
          & "C:\mysql\bin\mysqld.exe" --initialize-insecure --console

          # Install MySQL service
          & "C:\mysql\bin\mysqld.exe" --install "MySQL80"
          Start-Sleep -Seconds 5

      - name: Start MySQL service
        run: |
          net start MySQL80
          Start-Sleep -Seconds 5
          
          # Set root password
          & "C:\mysql\bin\mysqladmin.exe" -u root password "root"

      - name: Add MySQL to PATH
        run: |
          $mysqlBin = "C:\mysql\bin"
          [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$mysqlBin", [System.EnvironmentVariableTarget]::Process)

      - name: Check MySQL status
        run: |
          Get-Service MySQL80 | Format-List Name, Status, StartType
          netstat -ano | findstr "3306"
          & "C:\mysql\bin\mysqladmin" -h 127.0.0.1 -u root -proot ping

      - name: Create test database
        shell: cmd
        run: |
          echo CREATE DATABASE IF NOT EXISTS testdb; | mysql -h 127.0.0.1 -u root -proot

      - name: Verify database creation
        shell: cmd
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

      - name: Check SQL file
        run: |
          Write-Host "Checking SQL file content..."
          Get-Content backend\src\test\resources\full-database.sql -Raw | Select-Object -First 10
          Write-Host "File encoding:"
          [System.IO.File]::ReadAllText("backend\src\test\resources\full-database.sql").Encoding

      - name: Load test database
        shell: cmd
        run: |
          type backend\src\test\resources\full-database.sql | mysql -h 127.0.0.1 -u root -proot testdb

      - name: Verify database load
        shell: cmd
        run: |
          mysql -h 127.0.0.1 -u root -proot testdb -e "SHOW TABLES;"

      - name: Test MySQL connection
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 20

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build backend
        working-directory: backend
        run: .\mvnw.cmd clean package -DskipTests

      - name: Verify JAR file
        working-directory: backend
        run: dir target

      - name: Start backend and wait for port + health
        working-directory: backend
        shell: pwsh
        run: |
          $jar = Get-ChildItem -Path target -Filter *.jar | Select-Object -First 1
          if (-not $jar) { Write-Error "No JAR found"; exit 1 }
          Write-Host "Starting backend: $($jar.Name)"
          
          $backendProcess = Start-Process -FilePath "java" -ArgumentList "-jar", $jar.FullName -PassThru -NoNewWindow -RedirectStandardOutput "backend.log" -RedirectStandardError "backend.err.log"
          
          # Wait until port 8080 is listening
          $maxAttempts = 30
          $attempt = 0
          $portOpen = $false
          do {
              $attempt++
              $tcp = Test-NetConnection -ComputerName 127.0.0.1 -Port 8080
              if ($tcp.TcpTestSucceeded) { $portOpen = $true; break }
              Start-Sleep -Seconds 2
          } while ($attempt -lt $maxAttempts)
          if (-not $portOpen) { Write-Error "Port 8080 never opened"; exit 1 }

          Write-Host "Port 8080 is open, checking /actuator/health..."
          $attempt = 0
          $healthy = $false
          do {
              $attempt++
              try {
                  $resp = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 5
                  if ($resp.StatusCode -eq 200) { $healthy = $true; break }
              } catch {}
              Start-Sleep -Seconds 2
          } while ($attempt -lt $maxAttempts)
          if (-not $healthy) { Write-Error "/actuator/health never returned 200"; exit 1 }

          Write-Host "Backend is healthy and ready!"

        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_PROFILES_ACTIVE: test

      - name: Install frontend dependencies
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: npm run build

      - name: Start frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: Start-Process npm -ArgumentList 'run dev' -PassThru

      - name: Wait for frontend
        working-directory: ./frontend/imdb-ratings-frontend
        run: npx wait-on http://localhost:3000

      - name: Check backend port 8080
        shell: pwsh
        run: |
          Write-Host "Checking if backend process is listening on port 8080..."
          $tcp = Test-NetConnection -ComputerName 127.0.0.1 -Port 8080
          Write-Host "TcpTestSucceeded: $($tcp.TcpTestSucceeded)"
          Write-Host "RemoteAddress: $($tcp.RemoteAddress)"
          Write-Host "RemotePort: $($tcp.RemotePort)"
          if (-not $tcp.TcpTestSucceeded) {
            Write-Error "Backend is not listening on port 8080"
            exit 1
          }

      - name: Run Cypress tests
        working-directory: ./frontend/imdb-ratings-frontend
        run: npx cypress run --config baseUrl=http://localhost:3000
        env:
          CYPRESS_DEBUG: true
          DEBUG: cypress:server,cypress:launcher,cypress:cli

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend\cypress\screenshots

      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend\cypress\videos
